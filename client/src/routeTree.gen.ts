/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as SearchTypeIdImport } from './routes/search/$type/$id'
import { Route as AuthenticatedLibraryTypeIdImport } from './routes/_authenticated/library/$type/$id'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const SearchTypeIdRoute = SearchTypeIdImport.update({
  id: '/search/$type/$id',
  path: '/search/$type/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedLibraryTypeIdRoute = AuthenticatedLibraryTypeIdImport.update(
  {
    id: '/library/$type/$id',
    path: '/library/$type/$id',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/search/$type/$id': {
      id: '/search/$type/$id'
      path: '/search/$type/$id'
      fullPath: '/search/$type/$id'
      preLoaderRoute: typeof SearchTypeIdImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/library/$type/$id': {
      id: '/_authenticated/library/$type/$id'
      path: '/library/$type/$id'
      fullPath: '/library/$type/$id'
      preLoaderRoute: typeof AuthenticatedLibraryTypeIdImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedLibraryTypeIdRoute: typeof AuthenticatedLibraryTypeIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedLibraryTypeIdRoute: AuthenticatedLibraryTypeIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/': typeof AuthenticatedIndexRoute
  '/search/$type/$id': typeof SearchTypeIdRoute
  '/library/$type/$id': typeof AuthenticatedLibraryTypeIdRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/': typeof AuthenticatedIndexRoute
  '/search/$type/$id': typeof SearchTypeIdRoute
  '/library/$type/$id': typeof AuthenticatedLibraryTypeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/search/$type/$id': typeof SearchTypeIdRoute
  '/_authenticated/library/$type/$id': typeof AuthenticatedLibraryTypeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/about' | '/' | '/search/$type/$id' | '/library/$type/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/' | '/search/$type/$id' | '/library/$type/$id'
  id:
    | '__root__'
    | '/_authenticated'
    | '/about'
    | '/_authenticated/'
    | '/search/$type/$id'
    | '/_authenticated/library/$type/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AboutRoute: typeof AboutRoute
  SearchTypeIdRoute: typeof SearchTypeIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AboutRoute: AboutRoute,
  SearchTypeIdRoute: SearchTypeIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/about",
        "/search/$type/$id"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/",
        "/_authenticated/library/$type/$id"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/search/$type/$id": {
      "filePath": "search/$type/$id.tsx"
    },
    "/_authenticated/library/$type/$id": {
      "filePath": "_authenticated/library/$type/$id.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
